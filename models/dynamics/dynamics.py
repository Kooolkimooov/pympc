from numpy import ndarray


class Dynamics:
  """
  abstract class for the dynamics of a system
  """

  _state_size = None
  _actuation_size = None

  _position = None
  _orientation = None
  _velocity = None
  _body_rates = None

  _linear_actuation = None
  _angular_actuation = None


  @staticmethod
  def __call__( state: ndarray, actuation: ndarray ) -> ndarray:
    """
    evaluates the dynamics

    :param state: current state of the system of shape (state_size,)
    :param actuation: current actuation of the system of shape (actuation_size,)
    :returns: state derivative of the system
    """
    raise NotImplementedError
  
  @staticmethod
  def compute_error( actual: ndarray, target: ndarray ) -> ndarray:
    """
    computes the error between two paths generated by the dynamics
    
    :param actual: actual path of shape (l, 1, state_size) with l the length of the path
    :param target: target path of shape (l, 1, state_size) with l the length of the path
    :returns: error between the two paths path of shape (l, 1, state_size)
    """
    raise NotImplementedError

  @property
  def state_size( self ) -> int:
    """size of the expected state vector (x, x_dot)"""
    return self._state_size

  @property
  def actuation_size( self ) -> int:
    """size of the expected actuation vector"""
    return self._actuation_size

  @property
  def position( self ) -> int | slice | ndarray:
    """indices of the position inside the state vector"""
    return self._position

  @property
  def orientation( self ) -> int | slice | ndarray:
    """indices of the orientation inside the state vector"""
    return self._orientation

  @property
  def velocity( self ) -> int | slice | ndarray:
    """indices of the velocity inside the state vector"""
    return self._velocity

  @property
  def body_rates( self ) -> int | slice | ndarray:
    """indices of the body rates inside the state vector"""
    return self._body_rates

  @property
  def linear_actuation( self ) -> int | slice | ndarray:
    """indices of the linear actuation inside the actuation vector"""
    return self._linear_actuation

  @property
  def angular_actuation( self ) -> int | slice | ndarray:
    """indices of the angular actuation inside the actuation vector"""
    return self._angular_actuation
